// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum OccupancyStatus {
  voln√©
  obsazen√©
  rezervov√°no
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt       @map("updated_at")

  @@map("users")
}

model Property {
  id            String   @id @default(uuid())
  name          String
  address       String
  property_type String
  description   String?
  date_added    DateTime @default(now())
  units         Unit[]

  @@map("properties")
}

model Unit {
  id               String   @id @default(uuid())
  propertyId       String   @map("property_id")
  identifier       String
  floor            Int?
  area             Float?
  disposition      String?
  occupancy_status OccupancyStatus? // üëà enum s ƒçesk√Ωmi hodnotami
  monthly_rent     Float?
  deposit          Float?
  date_added       DateTime? @map("date_added")
  user_id          String?
  description      String?

  property Property @relation(fields: [propertyId], references: [id])
  leases   Lease[]

  @@map("units")
}

model Tenant {
  id              String   @id @default(uuid())
  full_name       String
  email           String   @unique
  phone           String?
  personal_id     String?
  address         String?
  employer        String?
  date_registered DateTime? @map("date_registered")
  note            String?
  leases          Lease[]

  @@map("tenants")
}

model Lease {
  id                  String   @id @default(uuid())
  unit_id             String
  tenant_id           String
  start_date          DateTime
  end_date            DateTime?
  name                String?
  rent_amount         Float
  monthly_water       Float
  monthly_gas         Float
  monthly_electricity Float
  monthly_services    Float
  repair_fund         Float
  custom_fields       Json
  custom_charges      Json
  charge_flags        Json
  total_billable_rent Float
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  unit     Unit     @relation(fields: [unit_id], references: [id])
  tenant   Tenant   @relation(fields: [tenant_id], references: [id])
  payments Payment[]
  monthly_obligations MonthlyObligation[]

  @@map("leases")
}

model Payment {
  id                     String   @id @default(uuid())
  lease_id               String
  payment_date           DateTime? @map("payment_date")
  amount                 Float
  payment_type           String?
  variable_symbol        String?
  note                   String?
  date_recorded          DateTime? @map("date_recorded")
  payment_month          String?
  created_at             DateTime? @map("created_at")
  updated_at             DateTime? @map("updated_at")
  monthly_obligation_id  String?   // vazba na MonthlyObligation
  payment_breakdown      Json?     // rozpad dle jednotliv√Ωch poplatk≈Ø

  lease                  Lease    @relation(fields: [lease_id], references: [id])
  monthly_obligation     MonthlyObligation? @relation(fields: [monthly_obligation_id], references: [id])

  @@map("payments")
}

model MonthlyObligation {
  id             String    @id @default(uuid())
  lease_id       String
  year           Int
  month          Int
  rent           Float
  water          Float
  gas            Float
  electricity    Float
  services       Float
  repair_fund    Float
  total_due      Float
  paid_amount    Float
  debt           Float
  note           String?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  custom_charges Json?
  charge_flags   Json?

  lease          Lease     @relation(fields: [lease_id], references: [id])
  payments       Payment[]

  @@map("monthly_obligations")
}
